#!/bin/sh

## Location of the testsuite's files for Schemas
## You can download these from
##   http://www.w3.org/XML/2001/05/xmlschema-test-collection

## IMPORTANT: BUG FIXES TO THE TESTSUITE:
## msxsdtest/element/elemT074.xml
##   - needs to be modified to point to right schema (not elemT074.xml)
##   - suntest/SunTestsAll/xsd003b.xsd: replace use of xsd:number with
##     xsd:decimal, since the former doesn't exist in the standard


xmltests=./xmltests

debug=""
show_expected_failure=0
run_ms=1
run_sun=1

while getopts "dsm" opt
do 
   case $opt in
      d) debug="-debug";;
      s) show_expected_failure=1;;
      m) run_ms=0;;
      *) echo "Invalid command line switch: $opt"
         exit 1
         ;;
   esac
done


XML="./testschema $debug"
ms=$xmltests/msxsdtest
sun=$xmltests/suntest/SunTestsAll

total=0
failed=0
expected_fail=0
passed=0
not_run=0

#######################################
## summary ()
#######################################

summary() {
  echo "Total:$total  Passed:$passed  Failed:$failed  Expected_Fail:$expected_fail  Notrun:$not_run"
}

#######################################
## expect()
##   $1=schema file (can be empty)
##   $2=test file (can be empty)
##   $3=expected output
#######################################

expect() {
   xsd_file="$1"
   xml_file="$2"
   expected="$3"

   xsd=""
   if [ x"$xsd_file" != x ]; then
     xsd="-xsd $xsd_file"
   fi

   out=`eval $XML $xsd $xml_file 2>&1`
   total=`expr $total + 1`

   if [ x"$out" != x"$expected" ]; then
      quoted=`echo $out | sed -e 's/\"/\\\"/g' -e 's,'$ms',\$ms,' -e 's,'$sun',\$sun,'`
      echo "#------------ Test failed ------------"
      echo "  cmd: $XML $xsd $xml_file"
      #echo "   output= $out"
      echo "  quoted= $quoted"
      echo "  expected= $expected"
      failed=`expr $failed + 1`
   else
      passed=`expr $passed + 1`
   fi
}

##################
## not_run()
##  $1=testname
##  $2=why
##################

notrun() {
  not_run=`expr $not_run + 1`
}

##################
## expected_failured()
##   $1=testname
##   $2=why
##################

expected_failure() {
  expected_fail=`expr $expected_fail + 1`
  total=`expr $total + 1`
  if [ x$show_expected_failure = x1 ]; then
     echo "$1: $2"
  fi
}

##################
## Microsoft elements tests -- A serie  (name attribute tests)
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemA001.xsd ""\
 "$ms/element/elemA001.xsd:3:16: Attribute \"name\" is required in this context"
expect $ms/element/elemA002.xsd "" ""
expect $ms/element/elemA003.xsd "" ""
expect $ms/element/elemA004.xsd "" ""
expect $ms/element/elemA005.xsd "" ""
expect $ms/element/elemA006.xsd "" \
 "$ms/element/elemA006.xsd:4:27: Element \"foo\" has already been declared"
expect $ms/element/elemA007.xsd "" ""
expect $ms/element/elemA009.xsd "" \
 "$ms/element/elemA009.xsd:3:31: Attribute \"name\": Invalid value: \"foo:bar\""
expect $ms/element/elemA010.xsd "" \
 "$ms/element/elemA010.xsd:3:28: Attribute \"name\": Invalid value: \":bar\""
expect $ms/element/elemA011.xsd "" \
 "$ms/element/elemA011.xsd:3:28: Attribute \"name\": Invalid value: \"foo:\""
expect $ms/element/elemA012.xsd "" \
 "$ms/element/elemA012.xsd:3:24: Attribute \"name\": Invalid value: \"\""
expect $ms/element/elemA013.xsd "" \
 "$ms/element/elemA013.xsd:3:25: Attribute \"name\": Invalid value: \"\""
expect $ms/element/elemA014.xsd "" \
 "$ms/element/elemA014.xsd:3:31: Attribute \"name\": Invalid value: \"-2.5foo\""
expect $ms/element/elemA015.xsd "" ""
expect $ms/element/elemA016.xsd "" ""
expect $ms/element/elemA017.xsd "" ""
fi

##################
## Microsoft elements tests -- B serie  (boolean tests)
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemB001.xsd "" ""
expect $ms/element/elemB002.xsd "" ""
expect $ms/element/elemB003.xsd "" \
 "$ms/element/elemB003.xsd:3:49: Attribute \"abstract\": Invalid value for boolean type: \"false true\""
expect $ms/element/elemB004.xsd "" \
 "$ms/element/elemB004.xsd:3:44: Attribute \"abstract\": Invalid value for boolean type: \"False\""
expect $ms/element/elemB005.xsd "" \
 "$ms/element/elemB005.xsd:3:39: Attribute \"abstract\": Invalid value for boolean type: \"\""
expect $ms/element/elemB006.xsd "" \
 "$ms/element/elemB006.xsd:3:46: Attribute \"abstract\": Invalid value for boolean type: \"boolean\""
expect $ms/element/elemB007.xsd "" ""
expect $ms/element/elemB008.xsd "" ""
expect $ms/element/elemB009.xsd "" \
 "$ms/element/elemB009.xsd:3:47: Attribute \"abstract\": Invalid value for boolean type: \"abstract\""
expect $ms/element/elemB010.xsd "" \
 "$ms/element/elemB010.xsd:3:49: Attribute \"abstract\": Invalid value for boolean type: \"true false\""
fi

##################
## Microsoft elements tests -- C serie  (block attribute + list type)
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemC001.xsd "" ""
expect $ms/element/elemC002.xsd "" ""
expect $ms/element/elemC003.xsd "" ""
expect $ms/element/elemC004.xsd "" ""
expect $ms/element/elemC005.xsd "" ""
expect $ms/element/elemC006.xsd "" ""
expect $ms/element/elemC007.xsd "" ""
expect $ms/element/elemC008.xsd "" ""
expect $ms/element/elemC009.xsd "" \
 "$ms/element/elemC009.xsd:3:39: Attribute \"block\": Invalid value \"foo\""
expect $ms/element/elemC010.xsd "" \
 "$ms/element/elemC010.xsd:3:40: Attribute \"block\": Invalid value \"#All\""
expect $ms/element/elemC011.xsd "" \
 "$ms/element/elemC011.xsd:3:45: Attribute \"block\": Invalid value \"Extension\""
expect $ms/element/elemC012.xsd "" \
 "$ms/element/elemC012.xsd:3:47: Attribute \"block\": Invalid value \"Restriction\""
expect $ms/element/elemC013.xsd "" \
 "$ms/element/elemC013.xsd:3:48: Attribute \"block\": Invalid value \"Substitution\""
expect $ms/element/elemC014.xsd "" \
 "$ms/element/elemC014.xsd:3:75: Attribute \"block\": Invalid value \"#all extension restriction substitution\""
expect $ms/element/elemC015.xsd "" \
 "$ms/element/elemC015.xsd:3:49: Attribute \"block\": Invalid value \"extension foo\""
expect $ms/element/elemC016.xsd "" \
 "$ms/element/elemC016.xsd:3:51: Attribute \"block\": Invalid value \"restriction foo\""
expect $ms/element/elemC017.xsd "" \
 "$ms/element/elemC017.xsd:3:52: Attribute \"block\": Invalid value \"substitution foo\""
expect $ms/element/elemC018.xsd "" ""
expect $ms/element/elemC020.xsd "" ""
fi

##################
## Microsoft elements tests -- D serie (default)
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemD001.xsd "" ""
expect $ms/element/elemD002.xsd "" ""
expect $ms/element/elemD003.xsd "" \
 "$ms/element/elemD003.xsd:3:72: Attributes \"fixed\" and \"default\" conflict with each other"
expect $ms/element/elemD004.xsd "" \
 "$ms/element/elemD004.xsd:9:56: No character data allowed by content model"
expect $ms/element/elemD005.xsd "" \
 "$ms/element/elemD005.xsd:3:58: string pattern not matched: \d\d\d\d-\d\d-\d\d"
expect $ms/element/elemD006.xsd "" ""
fi

##################
## Microsoft elements tests -- E serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemE001.xsd "" ""
expect $ms/element/elemE002.xsd "" ""
expect $ms/element/elemE003.xsd "" ""
expect $ms/element/elemE004.xsd "" ""
expect $ms/element/elemE005.xsd "" ""
expect $ms/element/elemE006.xsd "" \
 "$ms/element/elemE006.xsd:3:62: Attribute \"name\": Invalid value: \"-foo\""
expect $ms/element/elemE007.xsd "" \
 "$ms/element/elemE007.xsd:4:50: Attribute \"substitutionGroup\": Invalid value: \"\""
expect $ms/element/elemE008.xsd "" \
 "$ms/element/elemE008.xsd:11: Element \"foo\" from namespace \"\" was referenced, but never declared"
expect $ms/element/elemE009.xsd "" \
 "$ms/element/elemE009.xsd:16: Element \"foo\" from namespace \"\" was referenced, but never declared"
fi

##################
## Microsoft elements tests -- F serie (final)
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemF001.xsd "" ""
expect $ms/element/elemF002.xsd "" ""
expect $ms/element/elemF003.xsd "" ""
expect $ms/element/elemF004.xsd "" \
 "$ms/element/elemF004.xsd:3:48: Attribute \"final\": Invalid value \"substitution\""
expect $ms/element/elemF005.xsd "" ""
expect $ms/element/elemF006.xsd "" \
 "$ms/element/elemF006.xsd:3:60: Attribute \"final\": Invalid value \"restriction substitution\""
expect $ms/element/elemF007.xsd "" \
 "$ms/element/elemF007.xsd:3:58: Attribute \"final\": Invalid value \"substitution extension\""
expect $ms/element/elemF008.xsd "" \
 "$ms/element/elemF008.xsd:3:70: Attribute \"final\": Invalid value \"extension restriction substitution\""
expect $ms/element/elemF009.xsd "" \
 "$ms/element/elemF009.xsd:3:39: Attribute \"final\": Invalid value \"foo\""
expect $ms/element/elemF010.xsd "" \
 "$ms/element/elemF010.xsd:3:40: Attribute \"final\": Invalid value \"#All\""
expect $ms/element/elemF011.xsd "" \
 "$ms/element/elemF011.xsd:3:45: Attribute \"final\": Invalid value \"Extension\""
expect $ms/element/elemF012.xsd "" \
 "$ms/element/elemF012.xsd:3:47: Attribute \"final\": Invalid value \"Restriction\""
expect $ms/element/elemF013.xsd "" \
 "$ms/element/elemF013.xsd:3:48: Attribute \"final\": Invalid value \"Substitution\""
expect $ms/element/elemF014.xsd "" \
 "$ms/element/elemF014.xsd:3:75: Attribute \"final\": Invalid value \"#all extension restriction substitution\""
expect $ms/element/elemF015.xsd "" \
 "$ms/element/elemF015.xsd:3:49: Attribute \"final\": Invalid value \"extension foo\""
expect $ms/element/elemF016.xsd "" \
 "$ms/element/elemF016.xsd:3:51: Attribute \"final\": Invalid value \"restriction foo\""
expect $ms/element/elemF017.xsd "" \
 "$ms/element/elemF017.xsd:3:52: Attribute \"final\": Invalid value \"substitution foo\""
expect $ms/element/elemF018.xsd "" ""
fi

##################
## Microsoft elements tests -- G serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemG001.xsd "" ""
expect $ms/element/elemG002.xsd "" ""
expect $ms/element/elemG003.xsd "" \
 "$ms/element/elemG003.xsd:8:21: No character data allowed by content model"
expect $ms/element/elemG004.xsd "" \
 "$ms/element/elemG004.xsd:8:21: No character data allowed by content model"
expect $ms/element/elemG005.xsd "" ""
fi

##################
## Microsoft elements tests -- H serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemH001.xsd "" ""
expect $ms/element/elemH002.xsd "" ""
expect $ms/element/elemH003.xsd "" \
 "$ms/element/elemH003.xsd:2:80: Attribute \"elementFormDefault\": Element's value not in the enumeration set"
expect $ms/element/elemH004.xsd "" \
 "$ms/element/elemH004.xsd:2:89: Attribute \"elementFormDefault\": Element's value not in the enumeration set"
expect $ms/element/elemH005.xsd "" \
 "$ms/element/elemH005.xsd:2:91: Attribute \"elementFormDefault\": Element's value not in the enumeration set"
expect $ms/element/elemH006.xsd "" \
 "$ms/element/elemH006.xsd:2:101: Attribute \"elementFormDefault\": Element's value not in the enumeration set"
fi

##################
## Microsoft elements tests -- I serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemI001.xsd "" ""
expect $ms/element/elemI002.xsd "" ""
expect $ms/element/elemI003.xsd "" \
 "$ms/element/elemI003.xsd:3:35: Attribute \"id\": Invalid value: \"25\""
expect $ms/element/elemI004.xsd "" \
 "$ms/element/elemI004.xsd:3:33: Attribute \"id\": Invalid value: \"\""
expect $ms/element/elemI005.xsd "" \
 "$ms/element/elemI005.xsd:4:39: ID \"foo25\" already defined"
fi

##################
## Microsoft elements tests -- J serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemJ001.xsd "" ""
expect $ms/element/elemJ002.xsd "" ""
expect $ms/element/elemJ003.xsd "" ""
expect $ms/element/elemJ004.xsd "" ""
expect $ms/element/elemJ005.xsd "" ""
expect $ms/element/elemJ006.xsd "" \
 "$ms/element/elemJ006.xsd:6:43: Attribute \"maxOccurs\": Invalid value \"\""
expect $ms/element/elemJ007.xsd "" \
 "$ms/element/elemJ007.xsd:6:45: Attribute \"maxOccurs\": Invalid value \"-1\""
expect $ms/element/elemJ008.xsd "" \
 "$ms/element/elemJ008.xsd:6:52: Attribute \"maxOccurs\": Invalid value \"Unbounded\""
expect $ms/element/elemJ009.xsd "" ""
expect $ms/element/elemJ010.xsd "" ""
expect $ms/element/elemJ011.xsd "" ""
expect $ms/element/elemJ012.xsd "" \
 "$ms/element/elemJ012.xsd:6:52: Attribute \"minOccurs\": Value must be an integer"
expect $ms/element/elemJ013.xsd "" ""
expect $ms/element/elemJ014.xsd "" \
 "$ms/element/elemJ014.xsd:6:43: Attribute \"minOccurs\": Value must be an integer"
expect $ms/element/elemJ015.xsd "" \
 "$ms/element/elemJ015.xsd:6:45: Attribute \"minOccurs\": minInclusive is set to 0"
expect $ms/element/elemJ016.xsd "" \
 "$ms/element/elemJ016.xsd:6:52: Attribute \"minOccurs\": Value must be an integer"
expect $ms/element/elemJ017.xsd "" ""
expect $ms/element/elemJ018.xsd "" ""
expect $ms/element/elemJ019.xsd "" \
 "$ms/element/elemJ019.xsd:6:58: minOccurs > maxOccurs when creating particle"
expect $ms/element/elemJ020.xsd "" \
 "$ms/element/elemJ020.xsd:6:74: Attribute \"minOccurs\": Value must be an integer"
expect $ms/element/elemJ021.xsd "" ""
fi

##################
## Microsoft elements tests -- K serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemK001.xsd "" ""
expect $ms/element/elemK002.xsd "" ""
expect $ms/element/elemK003.xsd "" \
 "$ms/element/elemK003.xsd:3:39: Attribute \"nillable\": Invalid value for boolean type: \"\""
expect $ms/element/elemK004.xsd "" \
 "$ms/element/elemK004.xsd:3:43: Attribute \"nillable\": Invalid value for boolean type: \"True\""
expect $ms/element/elemK005.xsd "" \
 "$ms/element/elemK005.xsd:3:44: Attribute \"nillable\": Invalid value for boolean type: \"False\""
expect $ms/element/elemK006.xsd "" \
 "$ms/element/elemK006.xsd:3:49: Attribute \"nillable\": Invalid value for boolean type: \"true false\""
expect $ms/element/elemK007.xsd "" \
 "$ms/element/elemK007.xsd:3:43: Attribute \"nullable\": Attributes with no namespace invalid in this context"
fi

##################
## Microsoft elements tests -- L serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemL001.xsd "" ""
expect $ms/element/elemL002.xsd "" \
 "$ms/element/elemL002.xsd:10: Element \"foo\" from namespace \"\" was referenced, but never declared"
expect $ms/element/elemL003.xsd "" \
 "$ms/element/elemL003.xsd:5:39: \"ref\" attribute cannot be self-referencing"
expect $ms/element/elemL004.xsd "" ""
notrun $ms/element/elemL005.xsd "Schema is empty"
fi

##################
## Microsoft elements tests -- M serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemM001.xsd "" ""
expect $ms/element/elemM002.xsd "" \
 "$ms/element/elemM002.xsd:6: Type \"foo\" from namespace \"\" was referenced, but never declared"
expect $ms/element/elemM003.xsd "" \
 "$ms/element/elemM003.xsd:5:31: Self-referencing restriction not allowed"
expect $ms/element/elemM004.xsd "" ""
expect $ms/element/elemM005.xsd "" \
 "$ms/element/elemM005.xsd:6:39: \"type\" attribute cannot be specified along with \"ref\""
fi

##################
## Microsoft elements tests -- N serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemN001.xsd "" ""
expect $ms/element/elemN002.xsd "" ""
expect $ms/element/elemN003.xsd "" ""
expect $ms/element/elemN004.xsd "" ""
expect $ms/element/elemN005.xsd "" ""
expect $ms/element/elemN006.xsd "" \
 "$ms/element/elemN006.xsd:3:58: Attribute \"foo\": Attributes with no namespace invalid in this context"
fi

##################
## Microsoft elements tests -- O serie
##################

if [ x$run_ms = x1 ]; then
expect "" $ms/element/elemO001.xml \
 "$ms/element/elemO001.xml:4:11: \"parent\" is abstract"
expect "" $ms/element/elemO002.xml ""
expect "" $ms/element/elemO003.xml ""
expect "" $ms/element/elemO004.xml ""
expect "" $ms/element/elemO005.xml ""
expect "" $ms/element/elemO006.xml ""
expect "" $ms/element/elemO007.xml \
 "$ms/element/elemO007.xml:3:33: Element has character data, but is declared as nil"
expect "" $ms/element/elemO008.xml ""
expect "" $ms/element/elemO009.xml ""
expect "" $ms/element/elemO010.xml \
 "$ms/element/elemO010.xml:3:27: Attribute \"xsi:nil\" invalid for this element"
expect "" $ms/element/elemO011.xml \
 "$ms/element/elemO011.xml:3:27: Attribute \"xsi:nil\" invalid for this element"
expect "" $ms/element/elemO012.xml ""
fi

##################
## Microsoft elements tests -- P serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemP001.xsd "" \
 "$ms/element/elemP001.xsd:3:90: Attributes \"fixed\" and \"default\" conflict with each other"
expect $ms/element/elemP002.xsd "" \
 "$ms/element/elemP002.xsd:5:92: Attributes \"fixed\" and \"default\" conflict with each other"
expect $ms/element/elemP003.xsd "" ""
expect $ms/element/elemP004.xsd "" ""
expect $ms/element/elemP005.xsd "" \
 "$ms/element/elemP005.xsd:5:18: Either \"name\" or \"ref\" attribute must be present"
expect $ms/element/elemP006.xsd "" \
 "$ms/element/elemP006.xsd:6:45: \"ref\" attribute cannot be self-referencing"
expect $ms/element/elemP007.xsd "" \
 "$ms/element/elemP007.xsd:11:23: Cannot mix complexType definition and \"ref\" attribute"
expect $ms/element/elemP008.xsd "" \
 "$ms/element/elemP008.xsd:9:22: Cannot mix complexType definition and \"ref\" attribute"
expect $ms/element/elemP009.xsd "" \
 "$ms/element/elemP009.xsd:6:49: \"type\" attribute cannot be specified along with \"ref\""
fi

##################
## Microsoft elements tests -- Q serie
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemQ001.xsd "" ""
expect $ms/element/elemQ002.xsd "" ""
expect $ms/element/elemQ003.xsd "" ""
expect $ms/element/elemQ004.xsd "" \
 "$ms/element/elemQ004.xsd:7:19: Unexpected element: \"annotation\""
expect $ms/element/elemQ005.xsd "" ""
expect $ms/element/elemQ006.xsd "" \
 "$ms/element/elemQ006.xsd:10:19: Unexpected element: \"annotation\""
expect "" $ms/element/elemQ007.xml \
 "$ms/element/elemQ007.xml:3:8: Element \"fooTest\" or its substitutionGroup must be specified"
expect "" $ms/element/elemQ008.xml ""
expect "" $ms/element/elemQ009.xml \
 "$ms/element/elemQ009.xml:4:11: Element \"fooTest\" is repeated too many times, maximum number of occurrences is 1"
expect "" $ms/element/elemQ010.xml \
 "$ms/element/elemQ010.xml:3:8: Element \"fooTest\" or its substitutionGroup must be specified"
expect "" $ms/element/elemQ011.xml ""
expect "" $ms/element/elemQ012.xml \
 "$ms/element/elemQ012.xml:4:11: Unexpected element: \"fooTest\""
expect "" $ms/element/elemQ013.xml ""
expect "" $ms/element/elemQ014.xml \
 "$ms/element/elemQ014.xml:5:11: Unexpected element: \"fooTest\""
expect "" $ms/element/elemQ015.xml ""
expect $ms/element/elemQ016.xsd "" ""
expect "" $ms/element/elemQ017.xml ""
expect "" $ms/element/elemQ018.xml \
 "$ms/element/elemQ018.xml:3:23: Element's value must be \"Hello\""
expect "" $ms/element/elemQ019.xml \
 "$ms/element/elemQ019.xml:3:21: Element's value must be \"Hello\""
expect "" $ms/element/elemQ020.xml ""
expect "" $ms/element/elemQ021.xml ""
expect "" $ms/element/elemQ022.xml ""
fi

##################
## Microsoft elements tests -- R serie
##################

if [ x$run_ms = x1 ]; then
expect "" $ms/element/elemR001.xml ""
expect "" $ms/element/elemR002.xml ""
notrun $ms/element/elemR003.xsd "test seems wrong, all parsers fail"
expect "" $ms/element/elemR004.xml ""
expect "" $ms/element/elemR005.xml ""
notrun $ms/element/elemR006.xsd "test seems wrong, all parsers fail"
fi

##################
## Microsoft elements tests -- S serie (final)
##################

if [ x$run_ms = x1 ]; then
expect $ms/element/elemS001.xsd "" \
 "$ms/element/elemS001.xsd:36:84: \"fr_invalid\" is final for restrictions, and cannot be substituted by\"fr1_invalid\""
expect "" $ms/element/elemS002.xml ""
expect "" $ms/element/elemS003.xml ""
expect $ms/element/elemS004.xsd "" \
 "$ms/element/elemS004.xsd:36:84: \"fe_invalid\" is final for extensions, and cannot be substituted by\"fe1_invalid\""
expect $ms/element/elemS005.xsd "" \
 "$ms/element/elemS005.xsd:36:80: \"fr_valid\" is final for restrictions, and cannot be substituted by\"fr1_valid\""
expect $ms/element/elemS006.xsd "" \
 "$ms/element/elemS006.xsd:36:84: \"fe_invalid\" is final for extensions, and cannot be substituted by\"fe1_invalid\""
expect "" $ms/element/elemS007.xml ""
expect "" $ms/element/elemS008.xml ""
fi

##################
## Microsoft elements tests -- T serie (block)
##################

if [ x$run_ms = x1 ]; then
expect "" $ms/element/elemT001.xml \
 "$ms/element/elemT001.xml:3:29: Element \"fooTest\" blocks the use of restrictions of the type"
expect "" $ms/element/elemT002.xml ""
expect "" $ms/element/elemT003.xml ""
expect "" $ms/element/elemT004.xml \
 "$ms/element/elemT004.xml:3:29: Element \"fooTest\" blocks the use of extensions of the type"
expect "" $ms/element/elemT005.xml \
 "$ms/element/elemT005.xml:3:29: Element \"fooTest\" blocks the use of restrictions of the type"
expect "" $ms/element/elemT006.xml \
 "$ms/element/elemT006.xml:3:29: Element \"fooTest\" blocks the use of extensions of the type"
expect "" $ms/element/elemT007.xml ""
expect "" $ms/element/elemT008.xml ""
expect $ms/element/elemT009.xsd "" \
 "$ms/element/elemT009.xsd:10:59: Attribute \"block\": Invalid value \"list\""
expect $ms/element/elemT010.xsd "" \
 "$ms/element/elemT010.xsd:10:60: Attribute \"block\": Invalid value \"union\""
expect "" $ms/element/elemT011.xml \
 "$ms/element/elemT011.xml:2:29: Type is not a valid replacement for \"int\""
expect "" $ms/element/elemT012.xml \
 "$ms/element/elemT012.xml:2:30: Type is not a valid replacement for \"int\""
expect "" $ms/element/elemT013.xml \
 "$ms/element/elemT013.xml:2:30: Type is not a valid replacement for \"int\""
notrun $ms/element/elemT014.xml "Test seems invalid, all parsers fail"
notrun $ms/element/elemT015.xml "Test seems invalid, all parsers fail"
expect "" $ms/element/elemT016.xml ""
expect "" $ms/element/elemT017.xml \
 "$ms/element/elemT017.xml:3:21: Type is not a valid replacement for \"A\""
expect "" $ms/element/elemT018.xml \
 "$ms/element/elemT018.xml:2:23: Element \"test\" blocks the use of restrictions of the type"
expect "" $ms/element/elemT019.xml \
 "$ms/element/elemT019.xml:2:26: Type is not a valid replacement for \"A\""
notrun $ms/element/elemT022.xml "Test seems invalid, all parsers fail"
expect "" $ms/element/elemT024.xml \
 "$ms/element/elemT024.xml:2:24: Element \"test\" blocks the use of restrictions of the type"
expect "" $ms/element/elemT025.xml ""
expect "" $ms/element/elemT026.xml ""
expect "" $ms/element/elemT027.xml ""
expect "" $ms/element/elemT028.xml ""
expect "" $ms/element/elemT029.xml ""
expect "" $ms/element/elemT030.xml ""
expect "" $ms/element/elemT031.xml \
 "$ms/element/elemT031.xml:2:21: Type is not a valid replacement for \"A\""
expect "" $ms/element/elemT032.xml ""
expect "" $ms/element/elemT033.xml \
 "$ms/element/elemT033.xml:2:26: Type is not a valid replacement for \"A\""
expect "" $ms/element/elemT038.xml ""
expect "" $ms/element/elemT039.xml \
 "$ms/element/elemT039.xml:2:25: Element \"test3\" blocks the use of extensions of the type"
expect "" $ms/element/elemT040.xml ""
expect "" $ms/element/elemT041.xml ""
expect "" $ms/element/elemT042.xml ""
expect "" $ms/element/elemT043.xml ""
expect "" $ms/element/elemT044.xml ""
expect "" $ms/element/elemT045.xml \
 "$ms/element/elemT045.xml:2:21: Type is not a valid replacement for \"A\""
expect "" $ms/element/elemT046.xml \
 "$ms/element/elemT046.xml:2:21: Element \"test\" blocks the use of restrictions of the type"
expect "" $ms/element/elemT047.xml \
 "$ms/element/elemT047.xml:2:26: Type is not a valid replacement for \"A\""
expect "" $ms/element/elemT048.xml \
 "$ms/element/elemT048.xml:2:27: Type is not a valid replacement for \"A\""
expect "" $ms/element/elemT049.xml \
 "$ms/element/elemT049.xml:2:28: Type is not a valid replacement for \"A\""
expect "" $ms/element/elemT050.xml \
 "$ms/element/elemT050.xml:2:26: Type is not a valid replacement for \"A\""
expect "" $ms/element/elemT051.xml \
 "$ms/element/elemT051.xml:2:27: Type is not a valid replacement for \"A\""
expect "" $ms/element/elemT052.xml \
 "$ms/element/elemT052.xml:2:25: Element \"test2\" blocks the use of restrictions of the type"
expect "" $ms/element/elemT053.xml \
 "$ms/element/elemT053.xml:2:25: Element \"test2\" blocks the use of extensions of the type"
notrun $ms/element/elemT054.xml "Should fail, but all parsers let pass"
notrun $ms/element/elemT055.xml "Should fail, but all parsers let pass"
notrun $ms/element/elemT056.xml "Should fail, but all parsers let pass"
notrun $ms/element/elemT057.xml "Should fail, but all parsers let pass"
expect "" $ms/element/elemT058.xml ""
expect "" $ms/element/elemT074.xml \
 "$ms/element/elemT074.xml:2:23: Restrictions of type \"A\" are forbidden"
fi

##################
## Microsoft elements tests -- U serie (restrictions and facets)
##################

if [ x$run_ms = x1 ]; then
expect "" $ms/element/elemU001.xml ""
expect "" $ms/element/elemU002.xml ""
expect "" $ms/element/elemU003.xml ""
expect "" $ms/element/elemU004.xml ""
expected_failure $ms/element/elemU005.xml "\p{LU} unsupported in pattern"
expected_failure $ms/element/elemU006.xml "\p{IsGreek} unsupported in pattern"
expected_failure $ms/element/elemU007.xml "\P{IsGreek} unsupported in pattern"
expect "" $ms/element/elemU008.xml ""
expect "" $ms/element/elemU009.xml ""
expect "" $ms/element/elemU010.xml ""
expect "" $ms/element/elemU011.xml ""
expect "" $ms/element/elemU012.xml ""
expect "" $ms/element/elemU013.xml ""
expect "" $ms/element/elemU014.xml ""
expect "" $ms/element/elemU015.xml ""
expect "" $ms/element/elemU017.xml ""
expect "" $ms/element/elemU018.xml ""
expect "" $ms/element/elemU019.xml ""
expect "" $ms/element/elemU020.xml ""
expect "" $ms/element/elemU021.xml ""
expect "" $ms/element/elemU022.xml ""
expect "" $ms/element/elemU023.xml ""
expect "" $ms/element/elemU024.xml ""
expect "" $ms/element/elemU025.xml \
 "$ms/element/elemU025.xml:2:14: string pattern not matched: Chapter \d"
fi

##################
## Microsoft elements tests -- Z serie
##################

if [ x$run_ms = x1 ]; then
notrun $ms/element/elemZ001.xml "All parsers accept it"
expected_failure $ms/element/elemZ002.xml "Improper handling of derivation for simpleType for xsi:type attribute"
expect "" $ms/element/elemZ003.xml ""
expected_failure $ms/element/elemZ004.xsd "maxInt can't be bigger than Long_Integer'Last"
expect $ms/element/elemZ005.xsd ""
fi

##################
## Sun tests
##################

if [ x$run_sun = x1 ]; then
expected_failure "$sun/idc001.nogen.n00.xml" "XPath not support => <unique> not supported"
expect "$sun/idc001.nogen.xsd" "$sun/idc001.nogen.v00.xml" ""
expect "$sun/idc001.nogen.xsd" "$sun/idc001.nogen.v01.xml" ""
expected_failure "$sun/idc002.e.xsd" "<key> not supported"
expected_failure "$sun/idc002b.e.xsd" "<key> not supported"
expected_failure "$sun/idc003.e.xsd" "<key> not supported"
expected_failure "$sun/idc004.nogen.xsd $sun/idc004.nogen.n01.xml" "<key> not supported"
expected_failure "$sun/idc004.nogen.xsd $sun/idc004.nogen.n02.xml" "<key> not supported"
expected_failure "$sun/idc004.nogen.xsd $sun/idc004.nogen.n03.xml" "<key> not supported"
expected_failure "$sun/idc004.nogen.xsd $sun/idc004.nogen.v00.xml" "<key> not supported"
expected_failure "$sun/idc004.e.xsd" "<key> not supported"
expected_failure "$sun/idc005.nogen.xsd $sun/idc005.nogen.n00.xml" "<key> not supported"
expected_failure "$sun/idc005.nogen.xsd $sun/idc005.nogen.n01.xml" "<key> not supported"
expected_failure "$sun/idc005.nogen.xsd $sun/idc005.nogen.v00.xml" "<key> not supported"
expected_failure "$sun/idc006.nogen.xsd $sun/idc006.nogen.n00.xml" "<key> not supported"
expected_failure "$sun/idc006.nogen.xsd $sun/idc006.nogen.n01.xml" "<key> not supported"
expected_failure "$sun/idc006.nogen.xsd $sun/idc006.nogen.v00.xml" "<key> not supported"

### SYN xsd001

expect "$sun/xsd001.xsd" "$sun/xsd001.n00.xml" \
 "$sun/xsd001.n00.xml:6:12: Element \"child\" or its substitutionGroup must be specified"
expect "$sun/xsd001.xsd" "$sun/xsd001.n01.xml" \
 "$sun/xsd001.n01.xml:10:9: Unexpected element: \"child\""
expect "$sun/xsd001.xsd" "$sun/xsd001.n02.xml" \
 "$sun/xsd001.n02.xml:7:21: Attribute \"attr\": String is too short, minimum length is 5 characters"
expect "$sun/xsd001.xsd" "$sun/xsd001.n03.xml" \
 "$sun/xsd001.n03.xml:7:28: Attribute \"attr\": String too long, maximum length is 10 characters"
expect "$sun/xsd001.xsd" "$sun/xsd001.n04.xml" \
 "$sun/xsd001.n04.xml:4:11: String is too short, minimum length is 3 characters"
expect "$sun/xsd001.xsd" "$sun/xsd001.n05.xml" \
 "$sun/xsd001.n05.xml:3:20: String too long, maximum length is 10 characters"
expect "$sun/xsd001.xsd" "$sun/xsd001.n06.xml" \
 "$sun/xsd001.n06.xml:4:11: String is too short, minimum length is 3 characters"
expect "$sun/xsd001.xsd" "$sun/xsd001.n07.xml" \
 "$sun/xsd001.n07.xml:4:13: Namespace specification not authorized in this context"
expect "$sun/xsd001.xsd" "$sun/xsd001.v00.xml" ""
expect "$sun/xsd001.xsd" "$sun/xsd001.v01.xml" ""
expect "$sun/xsd001.xsd" "$sun/xsd001.v02.xml" ""
expect "$sun/xsd001.xsd" "$sun/xsd001.v03.xml" ""

### SUN xsd002

expect "$sun/xsd002.xsd" "$sun/xsd002.n00.xml" \
 "$sun/xsd002.n00.xml:3:11: Namespace specification not authorized in this context"
expect "$sun/xsd002.xsd" "$sun/xsd002.n01.xml" \
 "$sun/xsd002.n01.xml:3:9: Namespace specification is required in this context"
expect "$sun/xsd002.xsd" "$sun/xsd002.n02.xml" \
 "$sun/xsd002.n02.xml:3:11: Namespace specification not authorized in this context"
expect "$sun/xsd002.xsd" "$sun/xsd002.v00.xml" ""
expect "$sun/xsd002.xsd" "$sun/xsd002.v01.xml" ""

### SUN xsd003

expect "$sun/xsd003-1.e.xsd" "" \
 "$sun/xsd003-1.e.xsd:10:30: Unexpected element: \"element\""
expect "$sun/xsd003-2.e.xsd" "" \
 "$sun/xsd003-2.e.xsd:10:50: Unexpected element: \"attribute\""
expect "$sun/xsd003a.xsd" "$sun/xsd003a.v00.xml" ""
expect "$sun/xsd003b.xsd" "$sun/xsd003b.n00.xml" \
 "$sun/xsd003b.n00.xml:3:29: Attribute \"add\": Must have a decimal value"
expect "$sun/xsd003b.xsd" "$sun/xsd003b.n01.xml" \
 "$sun/xsd003b.n01.xml:3:50: Attribute \"foo:gAtt\": Element's value not in the enumeration set"
expect "$sun/xsd003b.xsd" "$sun/xsd003b.v00.xml" ""
expect "$sun/xsd003b.xsd" "$sun/xsd003b.v01.xml" ""

### SUN xsd004

expect "$sun/xsd004.xsd" "$sun/xsd004.n00.xml" \
 "$sun/xsd004.n00.xml:11:15: Must be a simple type, no <illegal> child allowed"
expect "$sun/xsd004.xsd" "$sun/xsd004.n01.xml" \
 "$sun/xsd004.n01.xml:8:20: No definition provided for \"undefined\""
expect "$sun/xsd004.xsd" "$sun/xsd004.n02.xml" \
 "$sun/xsd004.n02.xml:8:15: Namespace should be different from foo"
expect "$sun/xsd004.xsd" "$sun/xsd004.n03.xml" \
 "$sun/xsd004.n03.xml:8:21: Namespace should be different from foo"
expect "$sun/xsd004.xsd" "$sun/xsd004.n04.xml" \
 "$sun/xsd004.n04.xml:9:2: No character data allowed by content model"
expect "$sun/xsd004.xsd" "$sun/xsd004.n05.xml" \
 "$sun/xsd004.n05.xml:8:15: Invalid namespace for this element: \"foo\" not in \"##local\""
expect "$sun/xsd004.xsd" "$sun/xsd004.n06.xml" \
 "$sun/xsd004.n06.xml:8:12: Invalid namespace for this element: \"bar\" not in \"##local\""
expect "$sun/xsd004.xsd" "$sun/xsd004.n07.xml" \
 "$sun/xsd004.n07.xml:8:21: Invalid namespace for this element: \"zot\" not in \"##local\""
expect "$sun/xsd004.xsd" "$sun/xsd004.n08.xml" \
 "$sun/xsd004.n08.xml:8:21: No definition provided for \"undeclared\""
expect "$sun/xsd004.xsd" "$sun/xsd004.n09.xml" \
 "$sun/xsd004.n09.xml:8:12: Invalid namespace for this element: \"bar\" not in \"##targetNamespace\""
expect "$sun/xsd004.xsd" "$sun/xsd004.n10.xml" \
 "$sun/xsd004.n10.xml:8:18: Invalid namespace for this element: \"\" not in \"##targetNamespace\""
expect "$sun/xsd004.xsd" "$sun/xsd004.n11.xml" \
 "$sun/xsd004.n11.xml:8:15: Invalid namespace for this element: \"foo\" not in \"bar\""
expect "$sun/xsd004.xsd" "$sun/xsd004.n12.xml" \
 "$sun/xsd004.n12.xml:8:18: Invalid namespace for this element: \"\" not in \"bar\""
expect "$sun/xsd004.xsd" "$sun/xsd004.v00.xml" ""

### SUN xsd005

expect "$sun/xsd005.xsd" "$sun/xsd005.n00.xml" \
 "$sun/xsd005.n00.xml:5:10: Element \"a\" or its substitutionGroup must be specified"
expect "$sun/xsd005.xsd" "$sun/xsd005.n01.xml" \
 "$sun/xsd005.n01.xml:5:30: Unknown type \"undeclared\""
expect "$sun/xsd005.xsd" "$sun/xsd005.n02.xml" \
 "$sun/xsd005.n02.xml:6:15: Expecting at least 1 occurrences of \"c\" or its substitutionGroup"
expect "$sun/xsd005.xsd" "$sun/xsd005.n03.xml" \
 "$sun/xsd005.n03.xml:6:11: Expecting at least 1 occurrences of \"c\" or its substitutionGroup"
expect "$sun/xsd005.xsd" "$sun/xsd005.n04.xml" \
 "$sun/xsd005.n04.xml:6:15: Unexpected element: \"d\""
expect "$sun/xsd005.xsd" "$sun/xsd005.n05.xml" \
 "$sun/xsd005.n05.xml:6:18: Unknown type \"ext\""
expect "$sun/xsd005.xsd" "$sun/xsd005.n06.xml" \
 "$sun/xsd005.n06.xml:7:9: Element \"d\" or its substitutionGroup must be specified"
expect "$sun/xsd005.xsd" "$sun/xsd005.v00.xml" ""

### SUN xsd006

expect "$sun/xsd006.xsd" "$sun/xsd006.n00.xml" \
 "$sun/xsd006.n00.xml:5:11: Unexpected element: \"x\""
expect "$sun/xsd006.xsd" "$sun/xsd006.n01.xml" \
 "$sun/xsd006.n01.xml:5:15: Unexpected element: \"x\""
expect "$sun/xsd006.xsd" "$sun/xsd006.n02.xml" \
 "$sun/xsd006.n02.xml:5:13: Element \"x\" or its substitutionGroup must be specified"
expect "$sun/xsd006.xsd" "$sun/xsd006.n03.xml" \
 "$sun/xsd006.n03.xml:5:15: Unexpected element: \"x\""
expect "$sun/xsd006.xsd" "$sun/xsd006.n04.xml" \
 "$sun/xsd006.n04.xml:5:13: Element \"x\" or its substitutionGroup must be specified"
expect "$sun/xsd006.xsd" "$sun/xsd006.n05.xml" \
 "$sun/xsd006.n05.xml:6:13: Element \"x\" or its substitutionGroup must be specified"
expect "$sun/xsd006.xsd" "$sun/xsd006.n06.xml" \
 "$sun/xsd006.n06.xml:5:15: Unexpected element: \"x\""
expect "$sun/xsd006.xsd" "$sun/xsd006.n07.xml" \
 "$sun/xsd006.n07.xml:6:13: Element \"x\" or its substitutionGroup must be specified"
expect "$sun/xsd006.xsd" "$sun/xsd006.n08.xml" \
 "$sun/xsd006.n08.xml:5:13: Element \"x\" or its substitutionGroup must be specified"
expect "$sun/xsd006.xsd" "$sun/xsd006.n09.xml" \
 "$sun/xsd006.n09.xml:6:13: Element \"x\" or its substitutionGroup must be specified"
expect "$sun/xsd006.xsd" "$sun/xsd006.n10.xml" \
 "$sun/xsd006.n10.xml:6:13: Element \"x\" or its substitutionGroup must be specified"
expect "$sun/xsd006.xsd" "$sun/xsd006.v00.xml" ""

### SUN xsd008

expect "$sun/xsd008.xsd" "$sun/xsd008.n00.xml" \
 "$sun/xsd008.n00.xml:4:27: \"facet\" is abstract"
expect "$sun/xsd008.xsd" "$sun/xsd008.n01.xml" \
 "$sun/xsd008.n01.xml:4:27: Expecting at least 1 occurrences of \"long\" or its substitutionGroup"
expect "$sun/xsd008.xsd" "$sun/xsd008.n02.xml" \
 "$sun/xsd008.n02.xml:4:25: Expecting at least 1 occurrences of \"long\" or its substitutionGroup"
expect "$sun/xsd008.xsd" "$sun/xsd008.v00.xml" ""

### SUN xsd011

expect "$sun/xsd011.xsd" "$sun/xsd011.n00.xml" \
 "$sun/xsd011.n00.xml:7:17: Element \"x\" or its substitutionGroup must be specified"
expect "$sun/xsd011.xsd" "$sun/xsd011.n01.xml" \
 "$sun/xsd011.n01.xml:7:14: Element \"x\" or its substitutionGroup must be specified"
expect "$sun/xsd011.xsd" "$sun/xsd011.n02.xml" \
 "$sun/xsd011.n02.xml:7:7: Element is set as nil, and doesn't accept any child element"
expect "$sun/xsd011.xsd" "$sun/xsd011.n03.xml" \
 "$sun/xsd011.n03.xml:7:14: String is too short, minimum length is 2 characters"
expect "$sun/xsd011.xsd" "$sun/xsd011.v00.xml" ""

### SUN xsd012

expect "$sun/xsd012.xsd" "$sun/xsd012.n00.xml" \
 "$sun/xsd012.n00.xml:4:12: No character data allowed by content model"
expect "$sun/xsd012.xsd" "$sun/xsd012.v00.xml" ""

### SUN xsd013

expect "$sun/xsd013.e.xsd" "" \
 "$sun/xsd013.e.xsd:20:9: Element \"root\" from namespace \"http://www.w3.org/2001/XMLSchema\" was referenced, but never declared"
expect "$sun/xsd014.e.xsd" "" \
 "$sun/xsd014.e.xsd:19:9: Element \"undef\" from namespace \"http://www.w3.org/2001/XMLSchema\" was referenced, but never declared"
expect "$sun/xsd015.e.xsd" "" \
 "$sun/xsd015.e.xsd:22:9: Type \"abc\" from namespace \"http://www.w3.org/2001/XMLSchema\" was referenced, but never declared"
expect "$sun/xsd016.e.xsd" "" \
 "$sun/xsd016.e.xsd:15:9: Type \"abc\" from namespace \"http://www.w3.org/2001/XMLSchema\" was referenced, but never declared"
expect "$sun/xsd017.e.xsd" "" \
 "$sun/xsd017.e.xsd:29:9: Type \"def\" from namespace \"foo\" was referenced, but never declared"
expect "$sun/xsd018.e.xsd" "" \
 "$sun/xsd018.e.xsd:29:9: Type \"abc\" from namespace \"http://www.w3.org/2001/XMLSchema\" was referenced, but never declared"
expect "$sun/xsd019.e.xsd" "" \
 "$sun/xsd019.e.xsd:28:9: Type \"abc\" from namespace \"http://www.w3.org/2001/XMLSchema\" was referenced, but never declared"

### SUN xsd020

expect "$sun/xsd020.e.xsd" "" \
 "$sun/xsd020.e.xsd:22:33: Type specified in a simpleContent context must not have a complexContent"
expect "$sun/xsd020-2.e.xsd" "" \
 "$sun/xsd020-2.e.xsd:25:9: Attribute \"foo:abc\" is referenced, but not defined"
expect "$sun/xsd020-3.e.xsd" "" \
 "$sun/xsd020-3.e.xsd:28:9: Group \"foo:abc\" is referenced, but not defined"
expect "$sun/xsd020-4.e.xsd" "" \
 "$sun/xsd020-4.e.xsd:32:9: attributeGroup \"foo:abc\" is referenced, but not defined"

### SUN xsd021

expect "$sun/xsd021.xsd" "$sun/xsd021.n00.xml" \
 "$sun/xsd021.n00.xml:8:28: Attribute \"f:a\": Value must be an integer"
expect "$sun/xsd021.xsd" "$sun/xsd021.n01.xml" \
 "$sun/xsd021.n01.xml:8:27: Attribute \"z:c\": Value must be an integer"
expect "$sun/xsd021.xsd" "$sun/xsd021.n02.xml" \
 "$sun/xsd021.n02.xml:8:38: Attribute \"u:undeclared\": No definition provided"
expect "$sun/xsd021.xsd" "$sun/xsd021.n03.xml" \
 "$sun/xsd021.n03.xml:8:31: Attribute \"f:b\": Value must be an integer"
expect "$sun/xsd021.xsd" "$sun/xsd021.n04.xml" \
 "$sun/xsd021.n04.xml:8:33: Attribute \"f:a\": Invalid namespace in this context, must be different from \"foo\""
expect "$sun/xsd021.xsd" "$sun/xsd021.n05.xml" \
 "$sun/xsd021.n05.xml:8:25: Attribute \"f:a\": Invalid namespace in this context, must be different from \"foo\""
expect "$sun/xsd021.xsd" "$sun/xsd021.n06.xml" \
 "$sun/xsd021.n06.xml:8:24: Attribute \"f:a\": No namespace allowed"
expect "$sun/xsd021.xsd" "$sun/xsd021.n07.xml" \
 "$sun/xsd021.n07.xml:8:24: Attribute \"b:b\": No namespace allowed"
expect "$sun/xsd021.xsd" "$sun/xsd021.n08.xml" \
 "$sun/xsd021.n08.xml:8:35: Attribute \"local\": Invalid namespace in this context, must be \"foo\""
expect "$sun/xsd021.xsd" "$sun/xsd021.n09.xml" \
 "$sun/xsd021.n09.xml:8:34: Attribute \"f:a\": Value must be an integer"
expect "$sun/xsd021.xsd" "$sun/xsd021.n10.xml" \
 "$sun/xsd021.n10.xml:8:30: Attribute \"local\": Invalid namespace in this context, must be \"bar\""
expect "$sun/xsd021.xsd" "$sun/xsd021.n11.xml" \
 "$sun/xsd021.n11.xml:8:28: Attribute \"f:a\": Invalid namespace in this context, must be \"bar\""
notrun "$sun/xsd021.xsd" "$sun/xsd021.v00.xml" "This test seems wrong, since it conflicts with elemK007 and elemN006, and isn't passed by Xerces"

### SUN xsd022

notrun "$sun/xsd022.xsd" "$sun/xsd022.n00.xml" "Schema is invalid, no base attribute specified for restriction"
notrun "$sun/xsd022.xsd" "$sun/xsd022.v00.xml" "Schema is invalid, no base attribute specified for restriction"

### SUN xsd023

notrun "$sun/xsd023.e.xsd" "" "Schema is in fact correct, confirmed by Xerces"

## SUN xsiType

expect "$sun/xsiType1.xsd" "$sun/xsiType1.v1.xml" ""
expect "$sun/xsiType1.xsd" "$sun/xsiType1.n1.xml" \
 "$sun/xsiType1.n1.xml:5:30: Type is not a valid replacement for \"B\""

## SUN xsiTypeBlock-1

expect "$sun/xsiType-block-1.xsd" "$sun/xsiType-block-1.v1.xml" ""
expect "$sun/xsiType-block-1.xsd" "$sun/xsiType-block-1.n1.xml" \
 "$sun/xsiType-block-1.n1.xml:5:26: Extensions of type \"B\" are forbidden"
expect "$sun/xsiType-block-1.xsd" "$sun/xsiType-block-1.n2.xml" \
 "$sun/xsiType-block-1.n2.xml:3:27: Extensions of type \"B\" are forbidden"
expect "$sun/xsiType-block-1.xsd" "$sun/xsiType-block-1.n3.xml" \
"$sun/xsiType-block-1.n3.xml:3:27: Extensions of type \"B\" are forbidden"
expect "$sun/xsiType-block-1.xsd" "$sun/xsiType-block-1.n4.xml" \
 "$sun/xsiType-block-1.n4.xml:3:27: Extensions of type \"B\" are forbidden"

## SUN xsiTypeBlock-2

expect "$sun/xsiType-block-2.xsd" "$sun/xsiType-block-2.v1.xml" ""
expect "$sun/xsiType-block-2.xsd" "$sun/xsiType-block-2.n1.xml" \
 "$sun/xsiType-block-2.n1.xml:5:26: Extensions of type \"B\" are forbidden"
expect "$sun/xsiType-block-2.xsd" "$sun/xsiType-block-2.n2.xml" \
 "$sun/xsiType-block-2.n2.xml:3:27: Extensions of type \"Dr\" are forbidden"
expect "$sun/xsiType-block-2.xsd" "$sun/xsiType-block-2.n3.xml" \
 "$sun/xsiType-block-2.n3.xml:3:27: Extensions of type \"B\" are forbidden"
expect "$sun/xsiType-block-2.xsd" "$sun/xsiType-block-2.n4.xml" \
 "$sun/xsiType-block-2.n4.xml:3:27: Extensions of type \"De\" are forbidden"

### SUN xsiTypeBlock-3

expect "$sun/xsiType-block-3.xsd" "$sun/xsiType-block-3.v1.xml" ""
expect "$sun/xsiType-block-3.xsd" "$sun/xsiType-block-3.n1.xml" \
 "$sun/xsiType-block-3.n1.xml:4:27: Element \"item2\" blocks the use of extensions of the type"
expect "$sun/xsiType-block-3.xsd" "$sun/xsiType-block-3.n2.xml" \
 "$sun/xsiType-block-3.n2.xml:3:27: Element \"item2\" blocks the use of extensions of the type"
expect "$sun/xsiType-block-3.xsd" "$sun/xsiType-block-3.n3.xml" \
 "$sun/xsiType-block-3.n3.xml:3:27: Element \"item2\" blocks the use of extensions of the type"
expect "$sun/xsiType-block-3.xsd" "$sun/xsiType-block-3.n4.xml" \
 "$sun/xsiType-block-3.n4.xml:3:27: Element \"item2\" blocks the use of extensions of the type"

### SUN xsiTypeBlock-4

expected_failure "$sun/xsiType-block-4.xsd" "$sun/xsiType-block-4.v1.xml" "Test itself says it is probably invalid"
expect "$sun/xsiType-block-4.xsd" "$sun/xsiType-block-4.n1.xml" \
 "$sun/xsiType-block-4.n1.xml:5:27: Restrictions of type \"Dr\" are forbidden"
expect "$sun/xsiType-block-4.xsd" "$sun/xsiType-block-4.n2.xml" \
 "$sun/xsiType-block-4.n2.xml:3:27: Element \"item2\" blocks the use of extensions of the type"
expect "$sun/xsiType-block-4.xsd" "$sun/xsiType-block-4.n3.xml" \
 "$sun/xsiType-block-4.n3.xml:4:27: Restrictions of type \"Dr\" are forbidden"
expect "$sun/xsiType-block-4.xsd" "$sun/xsiType-block-4.n4.xml" \
 "$sun/xsiType-block-4.n4.xml:4:27: Element \"item2\" blocks the use of extensions of the type"

### SUN type-and-subst

expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.v1.xml" ""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.v2.xml" ""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n1.xml" \
 "$sun/type-and-subst-1.n1.xml:4:26: Type is not a valid replacement for \"Dr\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n2.xml" \
 "$sun/type-and-subst-1.n2.xml:2:26: Type is not a valid replacement for \"Dr\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n3.xml" \
 "$sun/type-and-subst-1.n3.xml:2:26: Type is not a valid replacement for \"Dr\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n4.xml" \
 "$sun/type-and-subst-1.n4.xml:2:26: Type is not a valid replacement for \"Dr\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n5.xml" \
 "$sun/type-and-subst-1.n5.xml:3:27: Type is not a valid replacement for \"De\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n6.xml" \
 "$sun/type-and-subst-1.n6.xml:2:27: Type is not a valid replacement for \"De\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n7.xml" \
 "$sun/type-and-subst-1.n7.xml:2:27: Type is not a valid replacement for \"De\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n8.xml" \
 "$sun/type-and-subst-1.n8.xml:2:27: Type is not a valid replacement for \"De\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n9.xml" \
 "$sun/type-and-subst-1.n9.xml:2:27: Type is not a valid replacement for \"Drr\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n10.xml" \
 "$sun/type-and-subst-1.n10.xml:2:27: Type is not a valid replacement for \"Drr\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n11.xml" \
 "$sun/type-and-subst-1.n11.xml:2:27: Type is not a valid replacement for \"Drr\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n12.xml" \
 "$sun/type-and-subst-1.n12.xml:2:27: Type is not a valid replacement for \"Drr\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n13.xml" \
 "$sun/type-and-subst-1.n13.xml:2:27: Type is not a valid replacement for \"Drr\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n14.xml" \
 "$sun/type-and-subst-1.n14.xml:2:27: Type is not a valid replacement for \"Drr\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n15.xml" \
 "$sun/type-and-subst-1.n15.xml:2:27: Type is not a valid replacement for \"Dre\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n16.xml" \
 "$sun/type-and-subst-1.n16.xml:2:27: Type is not a valid replacement for \"Dre\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n17.xml" \
 "$sun/type-and-subst-1.n17.xml:2:27: Type is not a valid replacement for \"Dre\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n18.xml" \
 "$sun/type-and-subst-1.n18.xml:2:27: Type is not a valid replacement for \"Dre\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n19.xml" \
 "$sun/type-and-subst-1.n19.xml:2:27: Type is not a valid replacement for \"Dre\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n20.xml" \
 "$sun/type-and-subst-1.n20.xml:2:27: Type is not a valid replacement for \"Dre\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n21.xml" \
 "$sun/type-and-subst-1.n21.xml:2:27: Type is not a valid replacement for \"Der\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n22.xml" \
 "$sun/type-and-subst-1.n22.xml:2:27: Type is not a valid replacement for \"Der\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n23.xml" \
 "$sun/type-and-subst-1.n23.xml:2:27: Type is not a valid replacement for \"Der\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n24.xml" \
 "$sun/type-and-subst-1.n24.xml:2:27: Type is not a valid replacement for \"Der\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n25.xml" \
 "$sun/type-and-subst-1.n25.xml:2:27: Type is not a valid replacement for \"Der\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n26.xml" \
 "$sun/type-and-subst-1.n26.xml:2:27: Type is not a valid replacement for \"Der\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n27.xml" \
 "$sun/type-and-subst-1.n27.xml:2:27: Type is not a valid replacement for \"Dee\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n28.xml" \
 "$sun/type-and-subst-1.n28.xml:2:27: Type is not a valid replacement for \"Dee\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n29.xml" \
 "$sun/type-and-subst-1.n29.xml:2:27: Type is not a valid replacement for \"Dee\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n30.xml" \
 "$sun/type-and-subst-1.n30.xml:2:27: Type is not a valid replacement for \"Dee\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n31.xml" \
 "$sun/type-and-subst-1.n31.xml:2:27: Type is not a valid replacement for \"Dee\""
expect "$sun/type-and-subst-1.xsd" "$sun/type-and-subst-1.n32.xml" \
 "$sun/type-and-subst-1.n32.xml:2:27: Type is not a valid replacement for \"Dee\""






fi






summary
